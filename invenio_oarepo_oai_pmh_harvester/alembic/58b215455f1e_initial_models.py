#
# This file is part of Invenio.
# Copyright (C) 2016-2018 CERN.
#
# Invenio is free software; you can redistribute it and/or modify it
# under the terms of the MIT License; see LICENSE file for more details.

"""Initial models"""
import sqlalchemy as sa
import sqlalchemy_utils
from alembic import op

# revision identifiers, used by Alembic.
revision = '58b215455f1e'
down_revision = '9968e56e476f'
branch_labels = ()
depends_on = None


def upgrade():
    """Upgrade database."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('oarepo_oai_parser',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('code', sa.String(length=16), nullable=False),
                    sa.Column('description', sa.String(length=2048), nullable=True),
                    sa.Column('entry_point', sa.String(length=256), nullable=False),
                    sa.PrimaryKeyConstraint('id', name=op.f('pk_oarepo_oai_parser')),
                    sa.UniqueConstraint('code', name=op.f('uq_oarepo_oai_parser_code'))
                    )
    op.create_table('oarepo_oai_rule',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('code', sa.String(length=16), nullable=False),
                    sa.Column('description', sa.String(length=2048), nullable=True),
                    sa.Column('entry_point', sa.String(length=256), nullable=False),
                    sa.PrimaryKeyConstraint('id', name=op.f('pk_oarepo_oai_rule')),
                    sa.UniqueConstraint('code', name=op.f('uq_oarepo_oai_rule_code'))
                    )
    op.create_table('oarepo_oai_provider',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('code', sa.String(length=16), nullable=False),
                    sa.Column('description', sa.String(length=2048), nullable=True),
                    sa.Column('oai_parser_id', sa.Integer(), nullable=True),
                    sa.Column('metadata_prefix', sa.String(length=32), nullable=True),
                    sa.Column('oai_endpoint', sa.String(length=2048), nullable=False),
                    sa.ForeignKeyConstraint(['oai_parser_id'], ['oarepo_oai_parser.id'], name=op.f(
                        'fk_oarepo_oai_provider_oai_parser_id_oarepo_oai_parser')),
                    sa.PrimaryKeyConstraint('id', name=op.f('pk_oarepo_oai_provider')),
                    sa.UniqueConstraint('code', name=op.f('uq_oarepo_oai_provider_code'))
                    )
    op.create_table('oarepo_oai_provider_rules',
                    sa.Column('provider_id', sa.Integer(), nullable=True),
                    sa.Column('rule_id', sa.Integer(), nullable=True),
                    sa.ForeignKeyConstraint(['provider_id'], ['oarepo_oai_provider.id'], name=op.f(
                        'fk_oarepo_oai_provider_rules_provider_id_oarepo_oai_provider')),
                    sa.ForeignKeyConstraint(['rule_id'], ['oarepo_oai_rule.id'], name=op.f(
                        'fk_oarepo_oai_provider_rules_rule_id_oarepo_oai_rule'))
                    )
    op.create_table('oarepo_oai_sync',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('provider_id', sa.Integer(), nullable=True),
                    sa.Column('sync_start', sa.TIMESTAMP(), nullable=True),
                    sa.Column('sync_end', sa.TIMESTAMP(), nullable=True),
                    sa.Column('status', sa.String(length=32), nullable=True),
                    sa.Column('logs', sa.String(length=2048), nullable=True),
                    sa.Column('rec_created', sa.Integer(), nullable=True),
                    sa.Column('rec_modified', sa.Integer(), nullable=True),
                    sa.Column('rec_deleted', sa.Integer(), nullable=True),
                    sa.ForeignKeyConstraint(['provider_id'], ['oarepo_oai_provider.id'], name=op.f(
                        'fk_oarepo_oai_sync_provider_id_oarepo_oai_provider')),
                    sa.PrimaryKeyConstraint('id', name=op.f('pk_oarepo_oai_sync'))
                    )
    op.create_table('oarepo_oai_record',
                    sa.Column('id', sqlalchemy_utils.types.uuid.UUIDType, nullable=False),
                    sa.Column('oai_identifier', sa.String(length=2048), nullable=False),
                    sa.Column('last_sync_id', sa.INTEGER(), nullable=True),
                    sa.Column('modification_sync_id', sa.INTEGER(), nullable=True),
                    sa.Column('creation_sync_id', sa.INTEGER(), nullable=True),
                    sa.Column('timestamp', sa.TIMESTAMP(), nullable=False),
                    sa.ForeignKeyConstraint(['creation_sync_id'], ['oarepo_oai_sync.id'], name=op.f(
                        'fk_oarepo_oai_record_creation_sync_id_oarepo_oai_sync')),
                    sa.ForeignKeyConstraint(['id'], ['records_metadata.id'],
                                            name=op.f('fk_oarepo_oai_record_id_records_metadata')),
                    sa.ForeignKeyConstraint(['last_sync_id'], ['oarepo_oai_sync.id'], name=op.f(
                        'fk_oarepo_oai_record_last_sync_id_oarepo_oai_sync')),
                    sa.ForeignKeyConstraint(['modification_sync_id'], ['oarepo_oai_sync.id'],
                                            name=op.f(
                                                'fk_oarepo_oai_record_modification_sync_id_oarepo_oai_sync')),
                    sa.PrimaryKeyConstraint('id', name=op.f('pk_oarepo_oai_record')),
                    sa.UniqueConstraint('oai_identifier',
                                        name=op.f('uq_oarepo_oai_record_oai_identifier'))
                    )
    # ### end Alembic commands ###


def downgrade():
    """Downgrade database."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('oarepo_oai_record')
    op.drop_table('oarepo_oai_sync')
    op.drop_table('oarepo_oai_provider_rules')
    op.drop_table('oarepo_oai_provider')
    op.drop_table('oarepo_oai_rule')
    op.drop_table('oarepo_oai_parser')
    # ### end Alembic commands ###
